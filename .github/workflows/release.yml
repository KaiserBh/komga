name: Release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: Release notes (use \n for newlines)
        type: string
        required: false
      bump:
        description: 'Bump type'
        required: false
        default: 'next'
        type: choice
        options:
          - 'next'
          - 'major'
          - 'minor'
          - 'patch'
          - 'current'
      github_release:
        description: 'Create Github Release'
        default: true
        type: boolean
      docker_release:
        description: 'Push Docker images'
        default: true
        type: boolean

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version_current: ${{ steps.versions.outputs.version_current }}
      version_next: ${{ steps.versions.outputs.version_next }}
      should_release: ${{ steps.versions.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install svu
        run: |
          echo 'deb [trusted=yes] https://apt.fury.io/caarlos0/ /' | sudo tee /etc/apt/sources.list.d/caarlos0.list
          sudo apt update
          sudo apt install svu
      - name: Compute next version for release
        run: |
          echo "VERSION_NEXT=`svu ${{ inputs.bump }} --pattern="[0-9]*" --strip-prefix`" | tee -a $GITHUB_ENV
          echo "VERSION_NEXT_SUFFIX=`svu ${{ inputs.bump }} --pattern="[0-9]*" --strip-prefix`" | tee -a $GITHUB_ENV
      - name: Set Versions
        id: versions
        run: |
          echo "version_current=`svu current --pattern="[0-9]*" --strip-prefix`" >> $GITHUB_OUTPUT
          echo "version_next=${{ env.VERSION_NEXT_SUFFIX }}" >> $GITHUB_OUTPUT
          [[ `svu current --pattern="[0-9]*" --strip-prefix` != ${{ env.VERSION_NEXT }} ]] && echo "should_release=true" >> $GITHUB_OUTPUT || echo

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Display versions
        run: |
          echo "Current version: ${{ needs.version.outputs.version_current }}, should release: ${{ needs.version.outputs.version_next }}"

      - name: Update version in gradle.properties
        if: needs.version.outputs.should_release #only redo if the version changed
        run: sed -i -e "s/version=.*/version=${{ needs.version.outputs.version_next }}/" gradle.properties

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: komga-webui/package-lock.json

      - uses: actions/setup-java@v4
        with:
          java-version: 21
          java-package: 'jdk'
          distribution: 'temurin'

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          java-package: 'jdk'
          distribution: 'temurin'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: :komga:prepareThymeLeaf :komga:bootJar :komga-tray:jar
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Generate OpenAPI docs
        uses: gradle/actions/setup-gradle@v3
        if: needs.version.outputs.should_release #only redo if the version changed
        with:
          arguments: :komga:generateOpenApiDocs

      - name: Create release notes
        run: |
          mkdir release_notes
          echo -e "${{ inputs.release_notes }}" >> release_notes/release_notes.md
          echo "Release notes:"
          cat release_notes/release_notes.md
          echo ""

      - name: JReleaser Changelog append
        uses: gradle/actions/setup-gradle@v3
        if: needs.version.outputs.should_release #only redo if the version changed
        with:
          arguments: jreleaserChangelog
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: JReleaser Changelog output
        if: always() &&  needs.version.outputs.should_release
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-changelog
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: Release commit and push
        uses: EndBug/add-and-commit@v9
        if: needs.version.outputs.should_release #only redo if the version changed
        with:
          message: 'chore(release): ${{ needs.version.outputs.version_next }} [skip ci]'
          tag: '${{ needs.version.outputs.version_next }}'
          default_author: github_actions

      - name: JReleaser Release
        if: inputs.github_release
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: jreleaserRelease
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: JReleaser Release output
        if: always() && inputs.github_release
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: JReleaser Announce
        if: inputs.github_release
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: jreleaserAnnounce
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: JReleaser Announce output
        if: always() && inputs.github_release
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-announce
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: JReleaser Publish
        if: inputs.docker_release
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: jreleaserPublish
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: JReleaser Publish output
        if: always() && inputs.docker_release
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-publish
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties
